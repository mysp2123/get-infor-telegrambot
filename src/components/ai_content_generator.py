"""
AI Content Generator using Google Gemini for creating Facebook posts
"""

import os
import google.generativeai as genai
from typing import List, Optional
from src.components.news_scraper import NewsArticle
from src.components.facebook_scraper import FacebookPost
from src.utils.logger import get_logger

logger = get_logger(__name__)

class AIContentGenerator:
    """AI content generator for Facebook posts"""
    
    def __init__(self):
        self.api_key = os.getenv('GOOGLE_AI_API_KEY')
        if not self.api_key:
            raise ValueError("GOOGLE_AI_API_KEY not found in environment variables")
        
        genai.configure(api_key=self.api_key)
        self.model = genai.GenerativeModel('gemini-1.5-flash')
        
        # Vietnamese post templates and style guidelines
        self.style_guidelines = {
            'tone': 'expert, humorous, critical',
            'language': 'Vietnamese',
            'length': '250-400 words',
            'style': 'incorporate humor, criticism, slang where appropriate',
            'format': 'engaging Facebook post with emojis'
        }

    def generate_facebook_post(self, article: NewsArticle, 
                             related_posts: List[FacebookPost] = None) -> str:
        """
        Generate a Vietnamese Facebook post based on the article and related posts
        
        Args:
            article (NewsArticle): The selected news article
            related_posts (List[FacebookPost]): Related Facebook posts if any
            
        Returns:
            str: Generated Facebook post content
        """
        try:
            logger.info(f"Generating Facebook post for article: {article.title[:50]}...")
            
            # Prepare the prompt
            prompt = self._create_prompt(article, related_posts)
            
            # Generate content using Gemini
            response = self.model.generate_content(prompt)
            
            if response and response.text:
                generated_post = response.text.strip()
                logger.info("Facebook post generated successfully")
                return generated_post
            else:
                logger.error("Empty response from Gemini")
                return self._create_fallback_post(article)
                
        except Exception as e:
            logger.error(f"Error generating Facebook post: {str(e)}")
            return self._create_fallback_post(article)

    def _create_prompt(self, article: NewsArticle, 
                      related_posts: List[FacebookPost] = None) -> str:
        """Create a detailed prompt for Gemini"""
        
        prompt = f"""
H√£y vi·∫øt m·ªôt b√†i ƒëƒÉng Facebook b·∫±ng ti·∫øng Vi·ªát v·ªÅ b√†i b√°o tin t·ª©c sau ƒë√¢y. 
B√†i ƒëƒÉng c·∫ßn c√≥ phong c√°ch chuy√™n gia, c√≥ th·ªÉ mang t√≠nh h√†i h∆∞·ªõc, ph√™ ph√°n, v√† s·ª≠ d·ª•ng ti·∫øng l√≥ng ph√π h·ª£p.

**TH√îNG TIN B√ÅI B√ÅO:**
Ti√™u ƒë·ªÅ: {article.title}
Ngu·ªìn: {article.source}
T√≥m t·∫Øt: {article.summary}
N·ªôi dung ch√≠nh: {article.content[:1000]}...

**Y√äU C·∫¶U:**
- ƒê·ªô d√†i: 250-400 t·ª´
- Ng√¥n ng·ªØ: Ti·∫øng Vi·ªát
- Phong c√°ch: Chuy√™n gia, c√≥ th·ªÉ h√†i h∆∞·ªõc, ph√™ ph√°n
- T√¥ng ƒëi·ªáu: Th√¥ng minh, s√¢u s·∫Øc, c√≥ th·ªÉ m·ªâa mai khi ph√π h·ª£p
- S·ª≠ d·ª•ng emoji ph√π h·ª£p
- K·∫øt th√∫c v·ªõi hashtag li√™n quan

**H∆Ø·ªöNG D·∫™N VI·∫æT:**
1. M·ªü ƒë·∫ßu b·∫±ng m·ªôt c√¢u h·ªèi ho·∫∑c nh·∫≠n x√©t thu h√∫t s·ª± ch√∫ √Ω
2. Ph√¢n t√≠ch v·∫•n ƒë·ªÅ m·ªôt c√°ch s√¢u s·∫Øc
3. ƒê∆∞a ra quan ƒëi·ªÉm c√° nh√¢n ho·∫∑c d·ª± ƒëo√°n
4. K·∫øt th√∫c b·∫±ng c√¢u h·ªèi ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi ng∆∞·ªùi ƒë·ªçc
5. Th√™m 3-5 hashtag ph√π h·ª£p

**CH·ª¶ ƒê·ªÄ QUAN TR·ªåNG C·∫¶N T·∫¨P TRUNG:**
- N·∫øu li√™n quan ƒë·∫øn Trump, thu·∫ø quan, th∆∞∆°ng m·∫°i: ph√¢n t√≠ch t√°c ƒë·ªông ƒë·∫øn kinh t·∫ø
- N·∫øu li√™n quan ƒë·∫øn ch√≠nh tr·ªã M·ªπ: g√≥c nh√¨n t·ª´ vi·ªác t√°c ƒë·ªông ƒë·∫øn th·∫ø gi·ªõi
- N·∫øu li√™n quan ƒë·∫øn kinh t·∫ø: ph√¢n t√≠ch xu h∆∞·ªõng v√† c∆° h·ªôi

"""

        # Add related posts context if available
        if related_posts:
            prompt += f"\n**B√ÄI ƒêƒÇNG LI√äN QUAN ƒê√É C√ì:**\n"
            for i, post in enumerate(related_posts[:3]):
                prompt += f"B√†i ƒëƒÉng {i+1}: {post.caption[:200]}...\n"
            
            prompt += "\nH√£y tham kh·∫£o c√°c b√†i ƒëƒÉng tr√™n ƒë·ªÉ t·∫°o ra n·ªôi dung b·ªï sung ho·∫∑c c√≥ g√≥c nh√¨n kh√°c bi·ªát.\n"

        prompt += """
**V√ç D·ª§ PHONG C√ÅCH MONG MU·ªêN:**
"üî• Trump v·ª´a tuy√™n b·ªë tƒÉng thu·∫ø quan l√™n 60% v·ªõi h√†ng Trung Qu·ªëc - v√† th·ªã tr∆∞·ªùng ƒë√£ 'ƒëi√™n' ngay l·∫≠p t·ª©c! 

Nh√¨n con s·ªë n√†y m√† t√¥i ch·ªâ mu·ªën h·ªèi: li·ªáu ai ƒë√≥ c√≥ t√≠nh to√°n k·ªπ ch∆∞a? ü§î Thu·∫ø quan cao = gi√° h√†ng tƒÉng = ng∆∞·ªùi ti√™u d√πng M·ªπ ch·ªãu kh·ªï. ƒê√¢y kh√¥ng ph·∫£i l√† 'th·∫Øng', m√† l√† 't·ª± b·∫Øn v√†o ch√¢n' theo c√°ch elegantly nh·∫•t c√≥ th·ªÉ!

Dƒ© nhi√™n, c√°c CEO c√¥ng ngh·ªá ƒëang c∆∞·ªùi th·∫ßm v√¨ h·ªç ƒë√£ d·ª± tr√π s·∫µn k·∫ø ho·∫°ch B r·ªìi. C√≤n c√°c startup nh·ªè? Ch·∫Øc ƒëang ng·ªìi kh√≥c trong toilet... üòÖ

C√°c b·∫°n nghƒ© sao? ƒê√¢y l√† n∆∞·ªõc c·ªù th√¥ng minh hay l√† 'all-in' ki·ªÉu casino? 

#TradeWar #Trump #Economy #TaxPolicy #Business"

B√¢y gi·ªù h√£y vi·∫øt b√†i ƒëƒÉng cho b√†i b√°o tr√™n theo phong c√°ch t∆∞∆°ng t·ª±:
"""
        
        return prompt

    def _create_fallback_post(self, article: NewsArticle) -> str:
        """Create a simple fallback post if AI generation fails"""
        
        fallback_post = f"""
üì∞ **Tin t·ª©c n·ªïi b·∫≠t t·ª´ {article.source}**

{article.title}

{article.summary[:200]}...

ƒê√¢y l√† m·ªôt di·ªÖn bi·∫øn ƒë√°ng ch√∫ √Ω m√† ch√∫ng ta c·∫ßn theo d√µi. C√°c b·∫°n nghƒ© sao v·ªÅ v·∫•n ƒë·ªÅ n√†y?

üîó Ngu·ªìn: {article.source}

#News #Update #Analysis
"""
        
        return fallback_post

    def refine_post(self, original_post: str, user_feedback: str) -> str:
        """
        Refine the post based on user feedback
        
        Args:
            original_post (str): Original generated post
            user_feedback (str): User's feedback or corrections
            
        Returns:
            str: Refined post
        """
        try:
            logger.info("Refining post based on user feedback")
            
            prompt = f"""
H√£y s·ª≠a ƒë·ªïi b√†i ƒëƒÉng Facebook sau ƒë√¢y d·ª±a tr√™n ph·∫£n h·ªìi c·ªßa ng∆∞·ªùi d√πng:

**B√ÄI ƒêƒÇNG G·ªêC:**
{original_post}

**PH·∫¢N H·ªíI C·ª¶A NG∆Ø·ªúI D√ôNG:**
{user_feedback}

**Y√äU C·∫¶U:**
- Gi·ªØ nguy√™n phong c√°ch v√† ƒë·ªô d√†i t∆∞∆°ng t·ª±
- √Åp d·ª•ng c√°c thay ƒë·ªïi theo ph·∫£n h·ªìi
- ƒê·∫£m b·∫£o n·ªôi dung v·∫´n h·∫•p d·∫´n v√† chuy√™n nghi·ªáp
- Gi·ªØ nguy√™n ti·∫øng Vi·ªát v√† emoji ph√π h·ª£p

H√£y tr·∫£ v·ªÅ b√†i ƒëƒÉng ƒë√£ ƒë∆∞·ª£c s·ª≠a ƒë·ªïi:
"""
            
            response = self.model.generate_content(prompt)
            
            if response and response.text:
                refined_post = response.text.strip()
                logger.info("Post refined successfully")
                return refined_post
            else:
                logger.error("Empty response when refining post")
                return original_post
                
        except Exception as e:
            logger.error(f"Error refining post: {str(e)}")
            return original_post

    def create_post_summary(self, article: NewsArticle) -> str:
        """
        Create a short summary of the article for ranking display
        
        Args:
            article (NewsArticle): News article
            
        Returns:
            str: Short summary for Telegram display
        """
        try:
            prompt = f"""
T·∫°o m·ªôt t√≥m t·∫Øt ng·∫Øn g·ªçn (50-80 t·ª´) b·∫±ng ti·∫øng Vi·ªát cho b√†i b√°o sau:

Ti√™u ƒë·ªÅ: {article.title}
Ngu·ªìn: {article.source}
T√≥m t·∫Øt: {article.summary}

Y√™u c·∫ßu:
- 50-80 t·ª´
- T·∫≠p trung v√†o ƒëi·ªÉm ch√≠nh
- Phong c√°ch s√∫c t√≠ch, h·∫•p d·∫´n
- Ph√π h·ª£p ƒë·ªÉ hi·ªÉn th·ªã trong danh s√°ch l·ª±a ch·ªçn

Ch·ªâ tr·∫£ v·ªÅ t√≥m t·∫Øt, kh√¥ng c·∫ßn th√™m g√¨ kh√°c:
"""
            
            response = self.model.generate_content(prompt)
            
            if response and response.text:
                summary = response.text.strip()
                return summary
            else:
                # Fallback summary
                return f"{article.title[:100]}... (Ngu·ªìn: {article.source})"
                
        except Exception as e:
            logger.error(f"Error creating summary: {str(e)}")
            return f"{article.title[:100]}... (Ngu·ªìn: {article.source})"
